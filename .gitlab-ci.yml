# Default image to be used if a specific one has not been specified
image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest

# Variables
variables:
  # Role to be assumed by Terraform
  AWS_CREDS_TARGET_ROLE: arn:aws:iam::109972344243:role/gitlab-bayer-ecs
  # Default region where AWS resources will be deployed
  AWS_DEFAULT_REGION: us-east-1
  # Default root directory for terraform
  TF_ROOT: ${CI_PROJECT_DIR}
  # Directory containing the ECS terraform code
  CORE_DIR: tf-ecs

# Default before script
before_script:
  - cd ${TF_ROOT}

# List of stages
stages:
  - validate
  - plan-ecs-core
  - apply-ecs-core

# Job: tf-lint | Stage: Validate
# Purpose: Lint the Terraform configuration using tf-lint
tf-lint:
  stage: validate
  image:
    name: ghcr.io/terraform-linters/tflint-bundle:latest
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - tflint -v
    - tflint --recursive

# Job: checkov | Stage: Validate
# Purpose: Validate the Terraform configuration by applying security policies provided by Checkov
checkov:
  stage: validate
  image:
    name: bridgecrew/checkov:latest
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - checkov -d .

# Job: Validate | Stage: Validate
# Purpose: Validate the Terraform configuration files and check the format (fmt) as a sort of linting test
formatting:
  stage: validate
  script:
    - gitlab-terraform validate
    # Job will fail with exit code 3 if formatting changes are required
    - terraform fmt -list=true -write=false -diff=true -check=true -recursive
  only:
    changes:
      - "*.tf"
      - "**/*.tf"

# Job: pPlan | Stage: ecs
# Purpose: Capture the new Terraform configuration settings in main branch as a plan file
core-plan:
  stage: plan-ecs
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/${CORE_DIR}
  artifacts:
    name: plan
    paths:
      - ${CI_PROJECT_DIR}/${CORE_DIR}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
    expire_in: 7 days
  only:
    - main

# Job: Apply | Stage: ecs
# Separate apply job for manual launching Terraform as it can be destructive
core-apply:
  stage: apply-ecs-core
  script:
    - gitlab-terraform apply
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/${CORE_DIR}
  dependencies:
    - core-plan
  when: manual
  only:
    - main
  allow_failure: false

# Job: Destroy | Stage: Apply
# Purpose: Stop and destroy the resources configured by Terraform
core-destroy:
  stage: apply-ecs-core
  script:
    - gitlab-terraform destroy
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/${CORE_DIR}
  when: manual
  only:
    - main
  retry: 2
